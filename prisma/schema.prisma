// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FuelType {
  DIESEL
  PETROL
  ELECTRIC
  HYBRID
}

model Animal {
  id Int @id @default(autoincrement())

  name   String
  specie String
  age    Int

  student Student[]

  @@map("animals")
}

model City {
  id Int @id @default(autoincrement())

  name   String @unique
  county String

  weather Weather[]
  person  Person[]
  student Student[]

  @@map("cities")
}

model Weather {
  id Int @id @default(autoincrement())

  temp     Float
  humidity Float

  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId    Int
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?

  @@map("weathers")
}

model Car {
  id Int @id @default(autoincrement())

  manufacturer String
  model        String
  year         Int
  age          Int

  licensePlate String @unique

  fuel FuelType

  person    Person[]
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?

  @@map("cars")
}

model Todo {
  id Int @id @default(autoincrement())

  title     String
  body      String
  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  person    Person[]
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?
}

model Person {
  id Int @id @default(autoincrement())

  name String  @unique
  age  Int
  sex  Boolean @default(false) //Male

  cars  Car? @relation(fields: [carId], references: [id])
  carId Int?

  city   City? @relation(fields: [cityId], references: [id])
  cityId Int?

  todo      Todo?    @relation(fields: [todoId], references: [id])
  todoId    Int?
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?

  @@map("persons")
}

model Class {
  id        Int    @id @default(autoincrement())
  classname String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students  Student[]
  Teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId Int?

  @@map("classes")
}

model Student {
  id Int @id @default(autoincrement())

  name String @unique

  animals  Animal[]
  cities   City[]
  weathers Weather[]
  cars     Car[]
  todos    Todo[]
  persons  Person[]

  Class     Class?   @relation(fields: [classId], references: [id])
  classId   Int?
  Teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId Int?
}

model Teacher {
  id Int @id @default(autoincrement())

  name     String @unique
  password String

  students Student[]
  classes  Class[]
}
